import numpy as np
import os
from .utils.utils_alignment import align_data
from .utils.utils_angles import calculate_angles

tracked_joints = ['LFCoxa',
                  'LFFemur',
                  'LFTibia',
                  'LFTarsus',
                  'LFClaw',
                  'LMCoxa',
                  'LMFemur',
                  'LMTibia',
                  'LMTarsus',
                  'LMClaw',
                  'LHCoxa',
                  'LHFemur',
                  'LHTibia',
                  'LHTarsus',
                  'LHClaw',
                  'LAntenna',
                  'LStripe1',
                  'LStripe2',
                  'LStripe3',
                  'RFCoxa',
                  'RFFemur',
                  'RFTibia',
                  'RFTarsus',
                  'RFClaw',
                  'RMCoxa',
                  'RMFemur',
                  'RMTibia',
                  'RMTarsus',
                  'RMClaw',
                  'RHCoxa',
                  'RHFemur',
                  'RHTibia',
                  'RHTarsus',
                  'RHClaw',
                  'RAntenna',
                  'RStripe1',
                  'RStripe2',
                  'RStripe3']

class df3dPostProcess:
    def __init__(self, results_dir, multiple = False, file_name = ''):
        self.res_dir = results_dir
        self.tracked_joints = tracked_joints 
        self.raw_data_3d, self.raw_data_2d = load_data(results_dir, multiple, file_name)
        self.data_3d_dict = load_data_to_dict(self.raw_data_3d)
        self.data_2d_dict = load_data_to_dict(self.raw_data_2d)

    def align_3d_data(self, rescale = True):
        aligned_model = align_data(self.data_3d_dict, rescale)            
        return aligned_model

    def calculate_leg_angles(self):
        leg_angles = calculate_angles(self.aligned_model)
        return leg_angles

    
def load_data(exp, multiple = False, file_name = ''):
    if multiple:
        currentDirectory = os.getcwd()
        dataFile = os.path.join(currentDirectory,file_name)
        data = np.load(dataFile,allow_pickle=True)
        3d  = data[exp]
        2d = []
    else:
        data = np.load(exp,allow_pickle=True)
        3d = data['points3d']
        2d = data['points2d']

    return 3d, 2d

def load_data_to_dict(data):
    exp_dict = {}
    time_pts, body_parts, axes = data.shape

    if body_parts != len(tracked_joints):
        raise Exception("Check tracked joints definition")
    
    for i, name in enumerate(tracked_joints):
        if 'Antenna' in name: 
            body_part = 'Antennae'
            landmark = name[1:]
        elif 'Stripe' in name:
            body_part = 'Stripes'
            landmark = name[1:]
        else:
            body_part = name[0:2] + '_leg'
            landmark = name[2:]
            
        if body_part not in exp_dict.keys():
            exp_dict[body_part] = {}

        exp_dict[body_part][landmark] = data[:,i,:]
        
    return exp_dict






