#!/usr/bin/env python
"""
Perform grid search for sensitivity analysis.

This script will run the kinematic replay for each controllar gain pair and
save the results in the data/sensitivity_analysis folder in a pkl format.

"""

import os
import pkgutil
import glob
from pathlib import Path
from multiprocessing import Pool
import pickle

import numpy as np
import pandas as pd

from NeuroMechFly.experiments.kinematic_replay import kinematic_replay
from farms_container import Container

neuromechfly_path = Path(pkgutil.get_loader(
    "NeuroMechFly").get_filename()).parents[1]


def load_data(path):
    """ Loads the simulation data from h5 files into a dictionary.

    Returns
    -------
    [dict]
        Dictionary contains the physics data of each simulation run.

    Raises
    ------
    FileNotFoundError
        When directory does not exist.
    """

    file_names = [
        'joint_positions',
        'joint_velocities',
        'joint_torques',
        'contact_normal_force',
        'contact_lateral_force',
        'ball_rotations'
    ]

    pybullet_data = {key: dict() for key in file_names}

    if not os.path.exists(path):
        raise FileNotFoundError(f"{path} is not a valid path")

    for folder_name in os.listdir(path):
        if folder_name.startswith('.'):
            continue
        for physics_file_name in file_names:
            print(f"Loading {physics_file_name} in {folder_name}...")
            dir_name = os.path.join(
                path,
                folder_name,
                'physics',
                physics_file_name + '.h5',
            )
            pybullet_data[physics_file_name][folder_name] = pd.read_hdf(
                dir_name)

    return pybullet_data


def run_simulation(proportional_gain, derivative_gain):
    """ Main function """
    run_time = 6.0
    time_step = 5e-4
    starting_time = 0.
    behavior = 'walking'

    # Setting up the collision and ground sensors
    side = ['L', 'R']
    pos = ['F', 'M', 'H']
    leg_segments = ['Tibia'] + ['Tarsus' + str(i) for i in range(1, 6)]
    left_front_leg = ['LF' + name for name in leg_segments]
    right_front_leg = ['RF' + name for name in leg_segments]
    body_segments = [s + b for s in side for b in ['Eye', 'Antenna']]

    self_collision = []
    for link0 in left_front_leg:
        for link1 in right_front_leg:
            self_collision.append([link0, link1])

    for link0 in left_front_leg + right_front_leg:
        for link1 in body_segments:
            if link0[0] == link1[0]:
                self_collision.append([link0, link1])

    ground_contact = [
        s +
        p +
        name for s in side for p in pos for name in leg_segments if name != 'Tibia']

    # Setting the fixed joint angles to default values, can be altered to
    # change the appearance of the fly
    fixed_positions = {
        'revolute_support_1': 3.6,
        'joint_A3': -15,
        'joint_A4': -15,
        'joint_A5': -15,
        'joint_A6': -15,
        'joint_LAntenna': 35,
        'joint_RAntenna': -35,
        'joint_Rostrum': 90,
        'joint_Haustellum': -60,
        'joint_LWing_roll': 90,
        'joint_LWing_yaw': -17,
        'joint_RWing_roll': -90,
        'joint_RWing_yaw': 17,
        'joint_Head': 10
    }

    # Setting up the paths for the SDF and POSE files
    model_path = os.path.join(
        neuromechfly_path,
        'data/design/sdf/neuromechfly_noLimits.sdf'
    )
    pose_path = os.path.join(
        neuromechfly_path,
        'data/config/pose/pose_default.yaml')

    try:
        results_path = os.path.join(
            neuromechfly_path,
            'data/sensitivity_analysis/')
        os.makedirs(results_path)
        print('Directory does not exist, creating...')
    except FileExistsError:
        pass

    # Simulation options
    sim_options = {
        "headless": True,
        "model": model_path,
        "pose": pose_path,
        "model_offset": [0., 0, 11.2e-3],
        "run_time": run_time,
        "time_step": time_step,
        "base_link": 'Thorax',
        "ground_contacts": ground_contact,
        "self_collisions": self_collision,
        "draw_collisions": False,  # Set True to change the color of colliding segments
        "record": False,  # Set True to record the simulation
        "save_frames": False,
        "results_path": results_path,
        'camera_distance': 5.5,
        'track': False,
        'moviename': f"{results_path}.mp4",
        'moviespeed': 0.2,  # Speed of the recorded movie
        'slow_down': False,
        'sleep_time': 0.001,
        'rot_cam': False,
        'behavior': behavior,
        'ground': 'ball',
        'ball_mass': 54.6e-6,
        'ball_friction_coef': 1.3,
        'contactERP': 0.1,
        'globalCFM': 3.0,
        'numSolverIterations': 1000
    }

    # Paths of the position and velocity data
    data_path = os.path.join(
        neuromechfly_path,
        f'data/joint_tracking/{behavior}/fly1/df3d')

    angles_path = glob.glob(data_path + '/joint_angles*.pkl')[0]
    velocity_path = glob.glob(data_path + '/joint_velocities*.pkl')[0]

    # Initialize the container
    container = Container(run_time / time_step)
    # Initialize the simulation
    kp = round(float(proportional_gain), 1)
    kv = round(float(derivative_gain), 1)

    animal = kinematic_replay.DrosophilaSimulation(
        container,
        sim_options,
        kp=kp, kv=kv,
        angles_path=angles_path,
        velocity_path=velocity_path,
        starting_time=starting_time,
        fixed_positions=fixed_positions
    )

    #: Run the simulation
    print(f'Running Kp: {kp}, Kd: {kv}...')
    animal.run(optimization=False)
    #: Dump the results based on the date
    animal.container.dump(
        dump_path=os.path.join(
            results_path,
            'kp{}_kv{}'.format(
                kp, kv
            )
        ),
        overwrite=False
    )


if __name__ == "__main__":

    # Select number of cores
    n_cores = 16

    # Sweep across varying proportional and derivative gain values
    with Pool(processes=n_cores) as pool:
        pool.starmap(
            run_simulation,
            [
                (proportional_gain, derivative_gain)
                for proportional_gain in np.arange(0.1, 1.1, 0.1)
                for derivative_gain in np.arange(0.1, 1.1, 0.1)
            ]
        )

    data_path = os.path.join(neuromechfly_path, 'data/sensitivity_analysis/')
    # Load data
    pybullet_data = load_data(data_path)
    # Save data
    pickle.dump(
        pybullet_data,
        open(os.path.join(data_path, "sensitivity_analysis_data.pkl"), "wb")
    )
