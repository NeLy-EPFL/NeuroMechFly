#!/usr/bin/env python
"""
Script to generate figures for the sensitivity analysis.
In the command line, run $ run_sensitivity_analysis
to save the displayed figures simply add '--save' to the command you run.
"""

import os
import sys
import argparse
import glob
from pathlib import Path
import pkgutil

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
sys.tracebacklimit = 0

from NeuroMechFly.utils.plotting import (
    heatmap_plot, plot_kp_joint, plot_mu_sem)
from NeuroMechFly.utils.sensitivity_analysis import (
    calculate_mse_joints, calculate_statistics_joints)

neuromechfly_path = Path(pkgutil.get_loader(
    "NeuroMechFly").get_filename()).parents[1]

joints = [
    'Coxa',
    'Coxa_yaw',
    'Coxa_roll',
    'Femur',
    'Femur_roll',
    'Tibia',
    'Tarsus1']

legs = ['LF', 'LM', 'LH', 'RF', 'RM', 'RH']
time_step = 5e-4

# Beginning and end times for the force plots
beg = int(np.round(3.0 / time_step))
end = int(np.round(3.9 / time_step))

# Duration of the simulation run in the grid search
dur = int(np.round(4.0 / time_step))
gain = np.arange(0.1, 1.1, 0.1)

# Joints to show in the plots
joints_torque = ['joint_RFCoxa', 'joint_RMCoxa', 'joint_RHCoxa']
unit_torque = '$\\mu$Nmm'
legs_grf = ['RF', 'RM', 'RH']
unit_force = '$\\mu$N'


def convert_dict(data, starting_time, time_step, duration):
    names_equivalence = {
        'ThC_pitch': 'Coxa',
        'ThC_yaw': 'Coxa_yaw',
        'ThC_roll': 'Coxa_roll',
        'CTr_pitch': 'Femur',
        'CTr_roll': 'Femur_roll',
        'FTi_pitch': 'Tibia',
        'TiTa_pitch': 'Tarsus1'
    }

    beg = int(np.round(starting_time / time_step))
    dur = int(np.round(duration / time_step))

    converted_dict = {}
    for leg, joints in data.items():
        for joint_name, val in joints.items():
            new_name = 'joint_' + leg[:2] + names_equivalence[joint_name]
            converted_dict[new_name] = val[beg:beg + dur]
    return converted_dict


def plot_figure_s1(save_fig: bool):
    """ Regenerates the Supplementary Figure 1. """

    joint_angles_mse_df, _ = calculate_mse_joints(
        joint_data=joint_angles,
        ground_truth=baseline_position,
        starting_time=2.0,
        time_step=time_step
    )
    joint_vel_mse_df, _ = calculate_mse_joints(
        joint_data=joint_velocities,
        ground_truth=baseline_velocity,
        starting_time=2.0,
        time_step=time_step

    )

    pivot_pos, pivot_vel = 0, 0
    for leg in legs:
        temp_pos = joint_angles_mse_df.loc[joint_angles_mse_df['Leg'] == leg, :]
        pivot_pos += temp_pos.pivot(index='Kp', columns='Kv', values='MSE')
        temp_vel = joint_vel_mse_df.loc[joint_vel_mse_df['Leg'] == leg, :]
        pivot_vel += temp_vel.pivot(index='Kp', columns='Kv', values='MSE')

    # Convert explosion points into NaN
    pivot_pos[pivot_pos > 1e5] = np.nan
    pivot_vel[pivot_vel > 1e5] = np.nan

    fig, ax = plt.subplots(figsize=(8, 8))
    heatmap_plot(
        title="Joint Angles with Varying Kp and Kd",
        joint_data=pivot_pos,
        precision=".3f",
        colorbar_title="MSE(rad$^2$)",
        ax=ax,
        cmap="rocket")
    if save_fig:
        plt.savefig('./figureS1_A.pdf', dpi=300)
    plt.show()

    fig, ax = plt.subplots(figsize=(8, 8))
    heatmap_plot(
        title="Joint Velocities with Varying Kp and Kd",
        joint_data=pivot_vel,
        precision=".1f",
        colorbar_title="MSE((rad/s)$^2$)",
        ax=ax,
        cmap="rocket")
    if save_fig:
        plt.savefig('./figureS1_B.pdf', dpi=300)
    plt.show()


def plot_figure_s2a(save_fig: bool):
    """ Regenerates the Supplementary Figure 2 A. """

    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, joint in enumerate(joints_torque):
        plot_kp_joint(
            joint_torques,
            show_vector=False,
            calc_force=False,
            full_name=joint,
            ax=ax[i],
            gain_range=np.arange(0.1, 1.1, 0.1),
            scaling_factor=1e9,  # Conversion from SI units
            constant='kv0.9',
            condition='kp0.4_kv0.9',  # Selected gain pair
            beg=beg,
            intv=end - beg,
            time_step=time_step
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Joint Torques ({})'.format(unit_torque),
            title='{} {} Pitch Joint Torque wrt Changing Kp'.format(joint[6:8], joint[-4:])
        )

    plt.tight_layout()
    if save_fig:
        plt.savefig('./figure_s2a.pdf')
    plt.show()


def plot_figure_s2a_extra(save_fig: bool):
    """ Plots the Supplementary Figure 2 A's Variation. """
    torques_stat = calculate_statistics_joints(
        joint_torques,
        scaling_factor=1e9,  # Conversion from SI units
        constant='kv0.9',  # Sweep across Kp values
        force_calculation=False,
        joints=[
            'Coxa',
            'Coxa_yaw',
            'Coxa_roll',
            'Femur',
            'Femur_roll',
            'Tibia',
            'Tarsus1'])

    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, joint in enumerate(joints_torque):
        # Plot standard error and mean of one single joint torque
        plot_mu_sem(
            mu=torques_stat[joint]['mu'],
            error=torques_stat[joint]['stderr'],
            ax=ax[i],
            beg=beg,
            end=beg + dur,
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Joint Torques ({})'.format(unit_torque),
            title='{} {} Pitch Joint Torque Mean and Std Error'.format(joint[6:8], joint[-4:])
        )
    if save_fig:
        plt.savefig('./figure_s2a_extra.pdf')
    plt.show()


def plot_figure_s2b(save_fig: bool):
    """ Regenerates the Supplementary Figure 2 B. """

    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, leg in enumerate(legs_grf):
        plot_kp_joint(
            ground_contact_forces,
            show_vector=False,
            calc_force=True,
            full_name=leg,
            gain_range=np.arange(0.1, 1.1, 0.1),
            scaling_factor=1e6,  # Conversion from SI units
            ax=ax[i],
            constant='kv0.9',
            condition='kp0.4_kv0.9',  # Selected gain pair
            time_step=time_step,
            beg=beg,
            intv=end - beg
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Ground Reaction Forces ({})'.format(unit_force),
            title='{} Leg Ground Reaction Forces wrt Changing Kp'.format(leg)
        )
    if save_fig:
        plt.savefig('./figure_s2b.pdf')
    plt.show()


def plot_figure_s2b_extra(save_fig: bool):
    """ Plots the Supplementary Figure 2 B's Variation. """
    grf_stat = calculate_statistics_joints(
        ground_contact_forces,
        scaling_factor=1e6,
        constant='kv0.9',
        force_calculation=True,
    )

    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, leg in enumerate(legs_grf):
        # Plot standard error and mean of one single leg GRF
        plot_mu_sem(
            mu=grf_stat[leg]['mu'],
            error=grf_stat[leg]['stderr'],
            ax=ax[i],
            beg=beg,
            end=beg + dur,
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Ground Reaction Forces ({})'.format(unit_force),
            title='{} Leg Ground Reaction Forces wrt Changing Kp'.format(leg)
        )
    if save_fig:
        plt.savefig('./figure_s2b_extra.pdf')
    plt.show()


def plot_figure_s2c(save_fig: bool):
    """ Regenerates the Supplementary Figure 2 C. """
    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, joint in enumerate(joints_torque):
        plot_kp_joint(
            joint_torques,
            show_vector=False,
            calc_force=False,
            full_name=joint,
            ax=ax[i],
            gain_range=np.arange(0.1, 1.1, 0.1),
            scaling_factor=1e9,  # Conversion from SI units
            constant='kp0.4',
            condition='kp0.4_kv0.9',  # Selected gain pair
            beg=beg,
            intv=end - beg,
            time_step=time_step
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Joint Torques ({})'.format(unit_torque),
            title='{} {} Pitch Joint Torque wrt Changing Kd'.format(joint[6:8], joint[-4:])
        )

    plt.tight_layout()
    if save_fig:
        plt.savefig('./figure_s2c.pdf')
    plt.show()


def plot_figure_s2c_extra(save_fig: bool):
    """ Plots the Supplementary Figure 2 C's Variation. """
    torques_stat = calculate_statistics_joints(
        joint_torques,
        scaling_factor=1e9,
        constant='kp0.4',
        force_calculation=False,
        joints=[
            'Coxa',
            'Coxa_yaw',
            'Coxa_roll',
            'Femur',
            'Femur_roll',
            'Tibia',
            'Tarsus1'])

    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, joint in enumerate(joints_torque):
        # Plot standard error and mean of one single joint torque
        plot_mu_sem(
            mu=torques_stat[joint]['mu'],
            error=torques_stat[joint]['stderr'],
            ax=ax[i],
            beg=beg,
            end=end,
            time_step=time_step
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Joint Torques ({})'.format(unit_torque),
            title='{} {} Pitch Joint Torque Mean and Std Error with Changing Kd'.format(joint[6:8], joint[-4:])
        )
    if save_fig:
        plt.savefig('./figure_s2c_extra.pdf')
    plt.show()


def plot_figure_s2d(save_fig: bool):
    """ Regenerates the Supplementary Figure 2 D. """

    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, leg in enumerate(legs_grf):
        plot_kp_joint(
            ground_contact_forces,
            show_vector=False,
            calc_force=True,
            full_name=leg,
            gain_range=np.arange(0.1, 1.1, 0.1),
            scaling_factor=1e6,  # Conversion from SI units
            ax=ax[i],
            constant='kp0.4',
            condition='kp0.4_kv0.9',  # Selected gain pair
            beg=beg,
            intv=end - beg,
            time_step=time_step
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Ground Reaction Forces ({})'.format(unit_force),
            title='{} Leg Ground Reaction Forces wrt Changing Kd'.format(leg)
        )
    if save_fig:
        plt.savefig('./figure_s2d.pdf')
    plt.show()


def plot_figure_s2d_extra(save_fig: bool):
    """ Plots the Supplementary Figure 2 D's Variation. """
    grf_stat = calculate_statistics_joints(
        ground_contact_forces,
        scaling_factor=1e6,  # Conversion from SI units
        constant='kp0.4',
        force_calculation=True,
    )

    fig, ax = plt.subplots(3, 1, figsize=(14, 10), sharex=True)
    for i, leg in enumerate(legs_grf):
        # Plot standard error and mean of one single leg GRF
        plot_mu_sem(
            mu=grf_stat[leg]['mu'],
            error=grf_stat[leg]['stderr'],
            ax=ax[i],
            beg=beg,
            end=end,
            time_step=time_step
        )

        ax[i].set(
            xlabel='Time (s)',
            ylabel='Ground Reaction Forces ({})'.format(unit_force),
            title='{} Leg Ground Reaction Forces wrt Changing Kd'.format(leg)
        )
    if save_fig:
        plt.savefig('./figure_s2d_extra.pdf')
    plt.show()


def load_data(pybullet_path, baseline_path_pos, baseline_path_vel, **kwargs):
    """ Loads the sensitivity analysis data. """
    global ground_contact_forces
    global joint_torques
    global joint_angles
    global joint_velocities
    global baseline_position
    global baseline_velocity

    starting_time = kwargs.get('starting_time', 2.0)
    time_step = kwargs.get('time_step', 5e-4)
    duration = kwargs.get('duration', 4.0)

    # Load sensitivity analysis results
    try:
        pybullet_data = pd.read_pickle(pybullet_path)
    except FileNotFoundError:
        print(f'''\n{pybullet_path} is not found!
        \n Please check the data path or download the data from:
        \n https://drive.google.com/file/d/1qwm4HEMuuxXqt8TvsmngShzo3aS5QIIP/view?usp=sharing \n''')
        raise

    # Load baseline files
    try:
        baseline_position = convert_dict(
            pd.read_pickle(baseline_path_pos),
            starting_time=starting_time,
            time_step=time_step,
            duration=duration)
    except FileNotFoundError:
        print(f'{baseline_path_pos} is not found!')
        raise

    try:
        baseline_velocity = convert_dict(
            pd.read_pickle(baseline_path_vel),
            starting_time=starting_time,
            time_step=time_step,
            duration=duration)
    except FileNotFoundError:
        print(f'{baseline_path_vel} is not found!')
        raise

    #: Get the data from the physics dictionary
    ground_contact_forces = pybullet_data['contact_normal_force']
    joint_torques = pybullet_data['joint_torques']
    joint_angles = pybullet_data['joint_positions']
    joint_velocities = pybullet_data['joint_velocities']


if __name__ == '__main__':
    """ Main. """
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--save', default=False, action='store_true')
    args = parser.parse_args()

    # NOTE: User should change the paths to where they download the data
    path_pybullet = os.path.join(
        neuromechfly_path,
        'data/sensitivity_analysis/sensitivity_analysis_data.pkl')
    joint_tracking_path = os.path.join(
        neuromechfly_path,
        'data/joint_tracking/walking/df3d')
    baseline_path_pos = glob.glob(
        joint_tracking_path +
        '/joint_angles*.pkl')[0]
    baseline_path_vel = glob.glob(
        joint_tracking_path +
        '/joint_velocities*.pkl')[0]
    # True if figures to be saved
    save_figures = args.save
    # Read data
    load_data(path_pybullet, baseline_path_pos, baseline_path_vel)
    # Plot figures
    plot_figure_s1(save_figures)
    plot_figure_s2a(save_figures)
    plot_figure_s2a_extra(save_figures)
    plot_figure_s2b(save_figures)
    plot_figure_s2b_extra(save_figures)
    plot_figure_s2c(save_figures)
    plot_figure_s2c_extra(save_figures)
    plot_figure_s2d(save_figures)
    plot_figure_s2d_extra(save_figures)
