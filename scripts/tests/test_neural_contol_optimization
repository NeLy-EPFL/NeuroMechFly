#!/usr/bin/env python
""" Script to run neuromuscular control. """

import argparse
import os
import pkgutil
from datetime import datetime
from pathlib import Path

import numpy as np
from farms_container import Container
from NeuroMechFly.experiments.network_optimization import (
    multiobj_optimization, neuromuscular_control)
from NeuroMechFly.utils.plotting import plot_collision_diagram, plot_data
from NeuroMechFly.utils.profile import profile

neuromechfly_path = Path(pkgutil.get_loader("NeuroMechFly").get_filename()).parents[1]


def parse_args():
    """ Parse arguments from command line """
    parser = argparse.ArgumentParser()
    parser.add_argument('-g', '--gen', default='txt')
    parser.add_argument('-p', '--path', default='')
    parser.add_argument('-s', '--sol', default='fastest')
    parser.add_argument('--gui', dest='gui', action='store_true')
    parser.add_argument('--slow', dest='slow', action='store_true')
    parser.add_argument('--profile', dest='profile', action='store_true')
    parser.set_defaults(gui=False, profile=False)
    return parser.parse_args()


def main(args):
    """ Main function """

    run_time = 2.5
    time_step = 1e-4

    # Set collision segments
    side = ['L', 'R']
    pos = ['F', 'M', 'H']
    leg_segments = ['Femur', 'Tibia'] + \
        ['Tarsus' + str(i) for i in range(1, 6)]

    ground_contact = [
        s + p + name
        for s in side
        for p in pos
        for name in leg_segments
        if 'Tarsus' in name
    ]

    # Setting up the paths for the SDF and POSE files
    model_path = os.path.join(neuromechfly_path, 'data/design/sdf/neuromechfly_locomotion_optimization.sdf')
    pose_path = os.path.join(neuromechfly_path, 'data/config/pose/pose_tripod.yaml')
    controller_path = os.path.join(neuromechfly_path, 'data/config/network/locomotion_network.graphml')

    # Get experiment information
    path = os.path.abspath(args.path)
    exp_name = path.split('/')[-1]
    exp_info = exp_name.split('_')

    if 'run' in exp_name:
        exp = f"{exp_name}"
        gen = args.gen
    else:
        exp = 'last_run'
        gen = 'final'

    # Simulation options
    sim_options = {
        "headless": not args.gui,
        "model": model_path,
        "model_offset": [0., 0., 0.2e-3],
        "run_time": run_time,
        "time_step": time_step,
        "pose": pose_path,
        "base_link": 'Thorax',
        "controller": controller_path,
        "ground_contacts": ground_contact,
        # 'self_collisions': self_collision,
        "draw_collisions": False, # Set True to change the color of colliding segments
        "record": False, # Set True to record the simulation
        'camera_distance': 4.5,
        'track': False,
        'moviename': f'test_neural_control_params.mp4',
        'moviespeed': 0.3, # Speed of the recorded movie
        'slow_down': args.slow,
        'sleep_time': time_step,
        'rot_cam': False, # Set true to rotate the camera automatically
        'ground': 'floor'
    }
    # Initialize the container
    container = Container(run_time / time_step)
    animal = neuromuscular_control.DrosophilaSimulation(container, sim_options)

    # Get parameters from optimization class
    problem = multiobj_optimization.DrosophilaEvolution()

    # Run the selected parameter values in the simulation
    # animal.update_parameters(problem.lower_bound)
    # animal.update_parameters((problem.lower_bound + problem.upper_bound)/2)
    animal.update_parameters(problem.upper_bound)
    animal.run(optimization=False)
    # Dump the optimization results
    results_path = os.path.join(
        neuromechfly_path,
        'scripts/neuromuscular_optimization',
        f"simulation_{exp}",
        f"gen_{gen}",
        f"sol_{args.sol}"
    )
    if not os.path.exists(results_path):
        os.makedirs(results_path)
    animal.container.dump(dump_path=results_path, overwrite=True)

if __name__ == "__main__":
    """ Main """
    # parse cli arguments
    cli_args = parse_args()
    if cli_args.profile:
        profile(main, args=cli_args)
    else:
        main(cli_args)
