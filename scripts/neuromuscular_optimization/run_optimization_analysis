#!/usr/bin/env python
""" Script to analyze optimization results.
In the command line, run $ python run_optimization_analysis.py --plot --path <path-to-results>

To change frequency of generation skip, add --frequency <freq-value>
To set the number of cores that the script will run, add --ncores <core-number>
"""

import argparse
import os
import pkgutil
from datetime import datetime
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np
from multiprocessing import Pool

from farms_container import Container
from NeuroMechFly.experiments.network_optimization import neuromuscular_control
from NeuroMechFly.utils.plotting import plot_gait_diagram
from NeuroMechFly.utils.profiler import profile

neuromechfly_path = Path(pkgutil.get_loader(
    "NeuroMechFly").get_filename()).parents[1]


def run_simulation(sol, gen, args):
    """ Main function """

    run_time = 2.0
    time_step = 1e-4

    #: Set collision segments
    ground_contact = [
        f"{side}{leg}{segment}"
        for side in ('L', 'R')
        for leg in ('F', 'M', 'H')
        for segment in tuple(f"Tarsus{i}" for i in range(1, 6))
    ]

    #: Setting up the paths for the SDF and POSE files
    model_path = neuromechfly_path.joinpath(
        "data/design/sdf/neuromechfly_locomotion_optimization.sdf"
    )
    pose_path = neuromechfly_path.joinpath(
        "data/config/pose/pose_tripod.yaml"
    )
    controller_path = neuromechfly_path.joinpath(
        "data/config/network/locomotion_network.graphml"
    )

    #: Get experiment information
    path = os.path.abspath(args.path)
    exp_name = path.split('/')[-1]
    exp_info = exp_name.split('_')

    exp = f"{exp_name}"
    gen = gen

    # Set the ball specs based on your experimental setup
    ball_specs = {
        'ball_mass': 54.6e-6,
        'ball_friction_coef': 1.3
    }
    # Simulation options
    sim_options = {
        "headless": True,
        "model": str(model_path),
        "model_offset": [0., 0., 11.2e-3],
        "run_time": run_time,
        "time_step": time_step,
        "pose": pose_path,
        "base_link": 'Thorax',
        "controller": controller_path,
        "ground_contacts": ground_contact,
        # 'self_collisions': self_collision,
        "draw_collisions": False,  # : Set True to change the color of colliding segments
        "record": False,  # : Set True to record the simulation
        'camera_distance': 4.5,
        'track': False,
        'moviename': f'{exp}_gen_{gen}_sol_{sol}.mp4',
        'moviespeed': 0.1,  # : Speed of the recorded movie
        'slow_down': False,
        'sleep_time': 1e-3,
        'rot_cam': False,  # : Set true to rotate the camera automatically
        'ground': 'ball',
        **ball_specs
    }
    #: Initialize the container
    container = Container(run_time / time_step)
    animal = neuromuscular_control.DrosophilaSimulation(container, sim_options)
    #: Load the results of the latest generation of the last optimization run
    fun_path = os.path.join(
        neuromechfly_path,
        'scripts/neuromuscular_optimization',
        args.path,
        'FUN.' + gen
    )
    var_path = os.path.join(
        neuromechfly_path,
        'scripts/neuromuscular_optimization',
        args.path,
        'VAR.' + gen
    )
    fun, var = np.loadtxt(fun_path), np.loadtxt(var_path)

    #: Select which solution to use (fastest, in this case)
    ind = animal.select_solution(sol, fun)
    params = var[ind]
    params = np.array(params)

    #: Run the selected parameter values in the simulation
    animal.update_parameters(params)
    animal.run(optimization=True)
    #: Dump the optimization results
    results_path = os.path.join(
        neuromechfly_path,
        'scripts/neuromuscular_optimization',
        f"simulation_{exp}",
        f"gen_{gen}",
        f"sol_{sol}"
    )

    if not os.path.exists(results_path):
        os.makedirs(results_path)

    animal.container.dump(dump_path=results_path, overwrite=True)

    if args.plot:
        contact_flag_data = animal.container.physics.contact_flag.log
        contact_flag_names = animal.container.physics.contact_flag.names
        contact_flag = {name: contact_flag_data[:, i]
                        for i, name in enumerate(contact_flag_names)}

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))
        ax1.scatter(fun[:, 0], fun[:, 1])
        ax1.scatter(fun[ind, 0], fun[ind, 1], label=f'Ind: {ind}')
        ax1.set_xlabel('Distance')
        ax1.set_ylabel('Stability')
        ax1.legend()

        duty_factor = [round(dut, 3) for dut in animal.duty_factor]
        plot_gait_diagram(data=contact_flag, ts=time_step, ax=ax2)
        ax2.set_title(f'Duty factor: {duty_factor}')
        ax2.set_xlim(0.5, 1.5)
        ax1.set_title(f'Speed: {round(animal.ball_rotations[0]*5/run_time, 2)} mm/s')
        fig.savefig(os.path.join(results_path, f'../selected_sol_{ind}.png'))


def parse_args():
    """ Parse arguments from command line """
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--path', default='')
    parser.add_argument('-f', '--frequency', type=int, default=5)
    parser.add_argument('-c', '--ncores', type=int, default=10)
    parser.add_argument('--plot', dest='plot', action='store_true')
    parser.set_defaults(gui=False, profile=False)
    return parser.parse_args()


if __name__ == "__main__":
    """ Main """
    # parse cli arguments
    cli_args = parse_args()
    exp_info = cli_args.path.split('_')
    generations = int(exp_info[-3])
    population = int(exp_info[-5])
    frequency = cli_args.frequency
    ncores = cli_args.ncores

    #: Parallelize
    with Pool(processes=ncores) as pool:
        pool.starmap(
            run_simulation,
            [
                (sol, str(gen), cli_args)
                for sol in np.arange(0, population, 1)
                for gen in np.arange(0, generations, frequency)
            ]
        )
