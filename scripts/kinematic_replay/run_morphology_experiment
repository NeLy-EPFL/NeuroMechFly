#!/usr/bin/env python
"""
Script to run kinematic replay with altered morphology.
In the command line, run $ run_morphology_experiment
Default behavior is grooming, to change it to walking, add '-b walking' to the command you run.
To record the simulation, append '--record' to the command you run.
To select different experiments, append '--experiment <exp-name>' where <exp-name> is stick_legs or stick_legs_antennae

To make further changes to the simulation, see 'sim_options' on line 122.
"""
import os
import glob
from datetime import datetime
import argparse
import pkgutil
from datetime import datetime
from pathlib import Path

from farms_container import Container
from NeuroMechFly.experiments.kinematic_replay import kinematic_replay
from NeuroMechFly.utils.profiler import profile

neuromechfly_path = Path(pkgutil.get_loader(
    "NeuroMechFly").get_filename()).parents[1]


def parse_args():
    """ Parse arguments from command line """
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--behavior', default='grooming')
    parser.add_argument('-e', '--experiment', default='stick_legs')
    parser.add_argument('--record', dest='record', action='store_true')
    parser.add_argument(
        '-pf', '--profile', default=False, type=str, required=False,
        dest="profile"
    )
    args = parser.parse_args()
    return args


def main(args):
    """ Main function """
    run_time = 4.0
    time_step = 5e-4
    behavior = args.behavior.lower()

    # Setting up the collision and ground sensors
    side = ['L', 'R']
    pos = ['F', 'M', 'H']
    leg_segments = ['Tibia', 'Tarsus1']
    left_front_leg = ['LF' + name for name in leg_segments]
    right_front_leg = ['RF' + name for name in leg_segments]
    body_segments = [s + b for s in side for b in ['Eye', 'Antenna']]

    self_collision = []
    for link0 in left_front_leg:
        for link1 in right_front_leg:
            self_collision.append([link0, link1])

    for link0 in left_front_leg + right_front_leg:
        for link1 in body_segments:
            if link0[0] == link1[0]:
                self_collision.append([link0, link1])

    ground_contact = [
        s +
        p +
        name for s in side for p in pos for name in leg_segments if name != 'Tibia']

    # Setting the fixed joint angles to default values, can be altered to
    # change the appearance of the fly
    fixed_positions = {
        'revolute_support_1': 3.6,
        'joint_A3': -15,
        'joint_A4': -15,
        'joint_A5': -15,
        'joint_A6': -15,
        'joint_LAntenna': 35,
        'joint_RAntenna': -35,
        'joint_Rostrum': 90,
        'joint_Haustellum': -60,
        'joint_LWing_roll': 90,
        'joint_LWing_yaw': -17,
        'joint_RWing_roll': -90,
        'joint_RWing_yaw': 17,
        'joint_Head': 10
    }

    if args.experiment == 'stick_legs':
        sdf_name = 'neuromechfly_frontleg_cylinder_antenna_normal.sdf'
    elif args.experiment == 'stick_legs_antennae':
        sdf_name = 'neuromechfly_frontleg_antenna_cylinder.sdf'
    else:
        sdf_name = 'neuromechfly_noLimits.sdf'

    model_path = os.path.join(
        neuromechfly_path,
        f'data/design/sdf/{sdf_name}')
    pose_path = os.path.join(
        neuromechfly_path,
        'data/config/pose/pose_default.yaml')
    results_path = os.path.join(
        neuromechfly_path,
        'scripts/kinematic_replay',
        'simulation_results',
        'morphology_experiment_{}_{}'.format(
            behavior,
            datetime.now().strftime('%y%m%d_%H%M%S')
        ))
    if not os.path.exists(results_path):
        os.makedirs(results_path)

    #Â Set the ball specs
    ball_specs = {
        'ball_friction_coef': 1.3,
        'ball_mass': 54.e-6
    }

    # Simulation options
    sim_options = {
        "headless": False,
        "model": model_path,
        "pose": pose_path,
        "model_offset": [0., 0, 11.2e-3],
        "run_time": run_time,
        "base_link": 'Thorax',
        "ground_contacts": ground_contact,
        "self_collisions": self_collision,
        "draw_collisions": True,  # Set True to change the color of colliding segments
        "record": args.record,  # Set True to record the simulation
        'camera_distance': 5.5,
        'track': False,
        'moviename': f"{results_path}.mp4",
        'moviespeed': 0.2,  # Speed of the recorded movie
        'slow_down': False,
        'sleep_time': 0.001,
        'rot_cam': False,  # Set true to rotate the camera automatically
        'behavior': behavior,
        'ground': 'ball',
        **ball_specs
    }

    # Paths of the position and velocity data
    data_path = os.path.join(
        neuromechfly_path,
        f'data/joint_tracking/{behavior}/df3d')
    angles_path = glob.glob(data_path + '/joint_angles*.pkl')[0]
    velocity_path = glob.glob(data_path + '/joint_velocities*.pkl')[0]

    # Initialize the container
    container = Container(run_time / time_step)
    # Initialize the simulation
    animal = kinematic_replay.DrosophilaSimulation(
        container,
        sim_options,
        kp=0.4, kv=0.9,
        angles_path=angles_path,
        velocity_path=velocity_path,
        fixed_positions=fixed_positions
    )
    # Run the simulation
    animal.run(optimization=False)
    # Dump the results based on the date
    animal.container.dump(
        dump_path=results_path,
        overwrite=True
    )


if __name__ == "__main__":
    """ Main """
    # parse cli arguments
    args = parse_args()
    if args.profile:
        profile(main, args=args)
    else:
        main(args)
