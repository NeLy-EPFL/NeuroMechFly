#!/usr/bin/env python
""" Script to run kinematic replay. """

from NeuroMechFly.experiments.kinematic_replay import kinematic_replay
from farms_container import Container
import os
import argparse
from pathlib import Path
import pkgutil
import glob

neuromechfly_path = Path(pkgutil.get_loader("NeuroMechFly").get_filename()).parents[1]

if __name__ == "__main__":
    """ Main. """
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--behavior', default='walking')
    args = parser.parse_args()

    run_time = 8.0
    time_step = 0.001
    behavior = args.behavior.lower()

    #: Setting up the collision and ground sensors
    side = ['L', 'R']
    pos = ['F', 'M', 'H']
    leg_segments = ['Tibia'] + ['Tarsus' + str(i) for i in range(1, 6)]
    left_front_leg = ['LF' + name for name in leg_segments]
    right_front_leg = ['RF' + name for name in leg_segments]
    body_segments = [s + b for s in side for b in ['Eye', 'Antenna']]

    self_collision = []
    for link0 in left_front_leg:
        for link1 in right_front_leg:
            self_collision.append([link0, link1])

    for link0 in left_front_leg + right_front_leg:
        for link1 in body_segments:
            if link0[0] == link1[0]:
                self_collision.append([link0, link1])

    ground_contact = [
        s +
        p +
        name for s in side for p in pos for name in leg_segments if name != 'Tibia']

    #: Setting the fixed joint angles to default values, can be altered to change the appearance of the fly
    fixed_positions = {
            'joint_A3': -15,
            'joint_A4': -15,
            'joint_A5': -15,
            'joint_A6': -15,
            'joint_LAntenna': 35,
            'joint_RAntenna': -35,
            'joint_Rostrum': 90,
            'joint_Haustellum': -60,
            'joint_LWing_roll': 90,
            'joint_LWing_yaw': -17,
            'joint_RWing_roll': -90,
            'joint_RWing_yaw': 17,
            'joint_Head': 10
        }

    #: Setting up the paths for the SDF and POSE files
    model_path = os.path.join(neuromechfly_path, 'data/design/sdf/neuromechfly_noLimits.sdf')
    pose_path = os.path.join(neuromechfly_path, 'data/config/pose/pose_default.yaml')
    #: Simulation options
    sim_options = {
        "headless": False,
        "model": model_path,
        "pose": pose_path,
        "model_offset": [0., 0, 11.2e-3],
        "run_time": run_time,
        "base_link": 'Thorax',
        "ground_contacts": ground_contact,
        "self_collisions": self_collision,
        "draw_collisions": True, #: Set True to change the color of colliding segments
        "record": False, #: Set True to record the simulation
        'camera_distance': 5.5,
        'track': False,
        'moviename': './videos/kinematic_replay_video.mp4',
        'moviespeed': 0.2, #: Speed of the recorded movie
        'slow_down': False,
        'sleep_time': 0.001,
        'rot_cam': False, #: Set true to rotate the camera automatically
        'behavior': behavior,
        'ground': 'ball'
    }

    #: Paths of the position and velocity data
    data_path = os.path.join(neuromechfly_path, f'data/joint_tracking/{behavior}/df3d')
    angles_path = glob.glob(data_path + '/joint_angles*.pkl')[0]
    velocity_path = glob.glob(data_path + '/joint_velocities*.pkl')[0]

    #: Initialize the container
    container = Container(run_time / time_step)
    #: Initialize the simulation
    animal = kinematic_replay.DrosophilaSimulation(
        container,
        sim_options,
        fixed_positions=fixed_positions,
        Kp=0.4, Kv=0.9,
        angles_path=angles_path,
        velocity_path=velocity_path
    )
    #: Run the simulation
    animal.run(optimization=False)
    #: Dump the results
    animal.container.dump(
        dump_path=f'./kinematic_replay_{behavior}', overwrite=True)
