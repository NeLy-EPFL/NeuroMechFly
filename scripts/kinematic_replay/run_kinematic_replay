#!/usr/bin/env python
"""
Script to run kinematic replay.
In the command line, run $ run_kinematic_replay
Default behavior is walking, to change it to grooming, add '-b grooming' to the command you run.
To record the simulation, append '--record' to the command you run.

To make further changes to the simulation, see 'sim_options' on line 127.
"""
import os
import glob
import pkgutil
import argparse
import pandas as pd
from pathlib import Path
from datetime import datetime
from farms_container import Container
from NeuroMechFly.utils.profiler import profile
from NeuroMechFly.experiments.kinematic_replay import kinematic_replay


neuromechfly_path = Path(pkgutil.get_loader(
    "NeuroMechFly").get_filename()).parents[1]


def parse_args():
    """ Parse arguments from command line """
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--behavior', default='walking')
    parser.add_argument('-pf', '--profile', default=False, type=str, required=False, dest="profile")
    parser.add_argument('--record', dest='record', action='store_true')
    parser.add_argument('--show_collisions', dest='show_collisions', action='store_true')
    parser.add_argument('-fly', '--fly_number', default='1')

    return parser.parse_args()


def main(args):
    """ Main function """
    behavior = args.behavior.lower()

    run_time = 6.0 if behavior == 'walking' else 4.0
    time_step = 5e-4
    starting_time = 0.0

    # Paths for data
    data_path = os.path.join(
        neuromechfly_path,
        f'data/joint_tracking/{behavior}/fly{args.fly_number}/df3d'
    )
    angles_path = glob.glob(data_path + '/joint_angles*.pkl')[0]
    velocity_path = glob.glob(data_path + '/joint_velocities*.pkl')[0]

    if behavior == 'walking':
        fly_angle_path = glob.glob(data_path + '/treadmill_info*.pkl')[0]
        fly_angle = pd.read_pickle(fly_angle_path)['angle']
    else:
        fly_angle = 0.0

    # Setting up the collision and ground sensors
    side = ['L', 'R']
    pos = ['F', 'M', 'H']
    leg_segments = ['Tibia'] + ['Tarsus' + str(i) for i in range(1, 6)]
    left_front_leg = ['LF' + name for name in leg_segments]
    right_front_leg = ['RF' + name for name in leg_segments]
    body_segments = [s + b for s in side for b in ['Eye', 'Antenna']]

    self_collision = []
    for link0 in left_front_leg:
        for link1 in right_front_leg:
            self_collision.append([link0, link1])

    for link0 in left_front_leg + right_front_leg:
        for link1 in body_segments:
            if link0[0] == link1[0]:
                self_collision.append([link0, link1])

    ground_contact = [
        s +
        p +
        name for s in side for p in pos for name in leg_segments if name != 'Tibia']

    # Setting the fixed joint angles to default values, can be altered to
    # change the appearance of the fly
    fixed_positions = {
        'revolute_support_1': fly_angle,
        'joint_A3': -15,
        'joint_A4': -15,
        'joint_A5': -15,
        'joint_A6': -15,
        'joint_LAntenna': 35,
        'joint_RAntenna': -35,
        'joint_Rostrum': 90,
        'joint_Haustellum': -60,
        'joint_LWing_roll': 90,
        'joint_LWing_yaw': -17,
        'joint_RWing_roll': -90,
        'joint_RWing_yaw': 17,
        'joint_Head': 10
    }

    # Setting up the paths for the SDF and POSE files
    model_path = os.path.join(
        neuromechfly_path,
        'data/design/sdf/neuromechfly_noLimits.sdf'
    )
    pose_path = os.path.join(
        neuromechfly_path,
        'data/config/pose/pose_stretch.yaml')
    results_path = os.path.join(
        neuromechfly_path,
        'scripts/kinematic_replay',
        'simulation_results',
        'kinematic_replay_{}_{}'.format(
            behavior,
            datetime.now().strftime('%y%m%d_%H%M%S')
        ))
    if not os.path.exists(results_path):
        os.makedirs(results_path)

    # Simulation options
    sim_options = {
        "headless": False,
        "model": model_path,
        "pose": pose_path,
        "model_offset": [0., 0, 11.2e-3],
        "run_time": run_time,
        "time_step": time_step,
        "base_link": 'Thorax',
        "ground_contacts": ground_contact,
        "self_collisions": self_collision,
        # Set True to change the color of colliding segments
        "draw_collisions": args.show_collisions,
        "record": args.record,  # Set True to record the simulation
        "save_frames": False,  # Set True to save frames instead of video
        "results_path": results_path,
        'camera_distance': 5.5,
        'track': False,
        'moviename': f"{results_path}.mp4",  # Name of the recorded video
        'moviespeed': 0.2,  # Speed of the recorded movie
        'slow_down': False,
        'sleep_time': 0.001,
        'rot_cam': True,  # Set True to rate the camera
        'behavior': behavior,
        'ground': 'ball',
        'ball_info': False if behavior == 'grooming' else True,
        'ball_mass': 54.6e-6,
        'ground_friction_coef': 1.3
    }

    # Initialize the container
    container = Container(run_time / time_step)
    # Initialize the simulation
    animal = kinematic_replay.DrosophilaSimulation(
        container,
        sim_options,
        kp=0.4, kv=0.9,
        angles_path=angles_path,
        velocity_path=velocity_path,
        starting_time=starting_time,
        fixed_positions=fixed_positions,
    )
    # Run the simulation
    animal.run(optimization=False)
    # Dump the results based on the date
    animal.container.dump(
        dump_path=results_path,
        overwrite=True
    )


if __name__ == "__main__":
    """ Main """
    # parse cli arguments
    cli_args = parse_args()
    if cli_args.profile:
        profile(main, args=cli_args)
    else:
        main(cli_args)
